"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[5390],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,k=p["".concat(s,".").concat(u)]||p[u]||m[u]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},90829:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],d={sidebar_position:3},s="Create a limit order",l={unversionedId:"limit-order-protocol/guide/create-limit-order",id:"limit-order-protocol/guide/create-limit-order",isDocsHomePage:!1,title:"Create a limit order",description:"LimitOrderBuilder.buildLimitOrder()",source:"@site/docs/limit-order-protocol/guide/create-limit-order.md",sourceDirName:"limit-order-protocol/guide",slug:"/limit-order-protocol/guide/create-limit-order",permalink:"/docs/limit-order-protocol/guide/create-limit-order",editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/limit-order-protocol/guide/create-limit-order.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Quick start",permalink:"/docs/limit-order-protocol/guide/quick-start"},next:{title:"Limit order structure",permalink:"/docs/limit-order-protocol/guide/limit-order-structure"}},c=[{value:"Parameters:",id:"parameters",children:[]},{value:"Example:",id:"example",children:[]},{value:"Limit order signature",id:"limit-order-signature",children:[]},{value:"Python Example",id:"python-example",children:[]}],m={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-a-limit-order"},"Create a limit order"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LimitOrderBuilder.buildLimitOrder()")),(0,i.kt)("h2",{id:"parameters"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Field"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"makerAssetAddress")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"the address of the asset you want to sell (address of a token contract)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"takerAssetAddress")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"the address of the asset you want to buy (address of a token contract)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"makerAddress")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"an address of the maker (wallet address)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"takerAddress")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String?")),(0,i.kt)("td",{parentName:"tr",align:null},"by default contains a zero address, which means that a limit order is available for everyone to fill. If you set a value, then the limit order will be available for execution only for the specified address (private limit order)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"reciever")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String?")),(0,i.kt)("td",{parentName:"tr",align:null},"by default contains a zero address, which means that taker asset will be sent to the address of the creator of the limit order. If you set a value, then taker asset will be sent to the specified address")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"makerAmount")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"the number of maker asset tokens that you want to sell (in token units). For example: 5 DAI = 5000000000000000000 units")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"takerAmount")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"the number of taker asset tokens that you want to receive for selling the maker asset (in token units). For example: 5 DAI = 5000000000000000000 units")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String?")),(0,i.kt)("td",{parentName:"tr",align:null},"a predicate call data. Default: ",(0,i.kt)("inlineCode",{parentName:"td"},"0x"),". See ",(0,i.kt)("a",{parentName:"td",href:"/docs/limit-order-protocol/guide/predicate"},"Predicate docs"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"permit")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String?")),(0,i.kt)("td",{parentName:"tr",align:null},"a permit (",(0,i.kt)("inlineCode",{parentName:"td"},"EIP-2612"),") call data. Could be built using ",(0,i.kt)("a",{parentName:"td",href:"https://github.com/1inch/permit-signed-approvals-utils"},"utility library"),". Default: ",(0,i.kt)("inlineCode",{parentName:"td"},"0x"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"interaction")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String?")),(0,i.kt)("td",{parentName:"tr",align:null},"a call data for InteractiveNotificationReceiver. See more ",(0,i.kt)("a",{parentName:"td",href:"/docs/limit-order-protocol/guide/interactive-receiver"},"Interaction receiver docs"),". Default: ",(0,i.kt)("inlineCode",{parentName:"td"},"0x"))))),(0,i.kt)("h2",{id:"example"},"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    LimitOrderBuilder,\n    Web3ProviderConnector,\n} from '@1inch/limit-order-protocol';\n\nconst contractAddress = '0x7643b8c2457c1f36dc6e3b8f8e112fdf6da7698a';\nconst walletAddress = '0xd337163ef588f2ee7cdd30a3387660019be415c9';\nconst chainId = 1;\n\nconst web3 = new Web3('...');\n// You can create and use a custom provider connector (for example: ethers)\nconst connector = new Web3ProviderConnector(web3);\n\nconst limitOrderBuilder = new LimitOrderBuilder(\n    contractAddress,\n    chainId,\n    connector\n);\n\n// ...\n\nconst limitOrder = limitOrderBuilder.buildLimitOrder({\n    makerAssetAddress: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    takerAssetAddress: '0x111111111117dc0aa78b770fa6a738034120c302',\n    makerAddress: '0xfb3c7ebccccAA12B5A884d612393969Adddddddd',\n    makerAmount: '100',\n    takerAmount: '200',\n    predicate: '0x0',\n    permit: '0x0',\n    interaction: '0x0',\n});\nconst limitOrderTypedData = limitOrderBuilder.buildLimitOrderTypedData(\n    limitOrder\n);\nconst limitOrderSignature = limitOrderBuilder.buildOrderSignature(\n    walletAddress,\n    limitOrderTypedData\n);\nconst limitOrderHash = limitOrderBuilder.buildLimitOrderHash(\n    limitOrderTypedData\n);\n")),(0,i.kt)("p",null,"As result you will receive a structure of ",(0,i.kt)("a",{parentName:"p",href:"/docs/limit-order-protocol/guide/limit-order-structure"},"limit order"),". Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "salt": "1",\n    "makerAsset": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",\n    "takerAsset": "0x6b175474e89094c44da98b954eedeac495271d0f",\n    "maker": "0xfb3c7ebccccAA12B5A884d612393969Adddddddd",\n    "receiver": "0x0000000000000000000000000000000000000000",\n    "allowedSender": "0x0000000000000000000000000000000000000000",\n    "makingAmount": "100",\n    "takingAmount": "200",\n    "makerAssetData": "0x",\n    "takerAssetData": "0x",\n    "getMakerAmount": "0xf4a215c300000...0000",\n    "getTakerAmount": "0x296637bf00000...0000",\n    "predicate": "0x",\n    "permit": "0x",\n    "interaction": "0x"\n}\n')),(0,i.kt)("h2",{id:"limit-order-signature"},"Limit order signature"),(0,i.kt)("p",null,"To fill a limit order, you need a typed data structure signature.",(0,i.kt)("br",{parentName:"p"}),"\n","You can create a signature following the example above."),(0,i.kt)("p",null,"But the example uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ProviderConnector")," which is designed to work with a wallet.",(0,i.kt)("br",{parentName:"p"}),"\n","If you need to get the signature on the server side, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"PrivateKeyProviderConnector")," and get the signature using the private key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const walletAddress = '0xd337163ef588f2ee7cdd30a3387660019be415c9';\n\nconst privateKey =\n    'd8d1f95deb28949ea0ecc4e9a0decf89e98422c2d76ab6e5f736792a388c56c7';\nconst limitOrderTypedData: EIP712TypedData = {\n    // ...\n};\n\nconst web3Provider = new Web3('...');\nconst privateKeyProviderConnector = new PrivateKeyProviderConnector(\n    privateKey,\n    web3Provider\n);\n\nconst signature = await privateKeyProviderConnector.signTypedData(\n    walletAddress,\n    limitOrderTypedData\n);\n")),(0,i.kt)("h2",{id:"python-example"},"Python Example"),(0,i.kt)("p",null,"To place a limit order in python requires more work since there's no library"),(0,i.kt)("p",null,"In this example we'll place a limit order on ETH mainnet for 100 USDC to 100 USDT"),(0,i.kt)("p",null,"In this example the predicate only uses the timestamp to determine when the order should expire but there are many more functions that can be used for the predicate including and, arbitraryStaticCall, eq, gt, it, or, and nonceEquals. An important note is that the increase nonce function in the limit order contract is how a user can cancel all orders if the nonceEquals function is in the predicate. timestampBelow and nonceEquals checks can be combined with the and function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from eth_account.messages import encode_structured_data\nfrom web3 import Web3\nimport requests\nimport time\nw3 = Web3(Web3.HTTPProvider("https://cloudflare-eth.com"))  # you can customize the RPC\nwallet_key = "0x0000000000000000000000000000000000000000" # Your wallet private key\nwallet_address = "0x0000000000000000000000000000000000000000" # Your wallet address\nlimit_order_contract = "0x119c71D3BbAC22029622cbaEc24854d3D32D2828" # the limit order contract\nETHERSCAN_API_KEY = "yourapikeytoken" # Etherscan API key, this may not be required or should be changed if the ABIs are changed to literals or a different blockchain API is used like api.bscscan.com or api.polygonscan.com\n\n# create the limit order contract object\nlimit_order_contract_abi_response = (requests.get(\'https://api.etherscan.io/api?module=contract&action=getabi&address=\' + limit_order_contract +\'&apikey=\' + ETHERSCAN_API_KEY))\nlimit_order_contract_abi = limit_order_contract_abi_response.json()[\'result\']\ncontract = w3.eth.contract(address=limit_order_contract, abi=limit_order_contract_abi)\n\n# wait for 5 second to avoid rate limiting, this can be removed if the API key is specified and not the free api key\ntime.sleep(5)\n\n# the ERC20 abi is used for getting information from the maker asset and taker asset\nerc20_abi_response = (requests.get(\'https://api.etherscan.io/api?module=contract&action=getabi&address=0x6b175474e89094c44da98b954eedeac495271d0f&apikey=\' + ETHERSCAN_API_KEY)) #DAI ABI since it\'s ERC20 standard\nerc20_abi = erc20_abi_response.json()["result"]\n\n# here we define the parameters of the limit order\nmakerAddress = Web3.toChecksumAddress(wallet_address)\ntakerAddress = "0x0000000000000000000000000000000000000000" # if specified only this address can be a taker\nmakerAsset = Web3.toChecksumAddress("0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48")\ntakerAsset = Web3.toChecksumAddress("0xdac17f958d2ee523a2206206994597c13d831ec7")\nmakingAmount = "100000000"\ntakingAmount = "100000000"\n\nmakerAssetContract = w3.eth.contract(address=makerAsset, abi=erc20_abi)\ntakerAssetContract = w3.eth.contract(address=takerAsset, abi=erc20_abi)\n\n# this is required information for the order to be valid\nmakerAssetData = makerAssetContract.encodeABI(fn_name="transferFrom", args=[makerAddress, takerAddress, int(makingAmount)])\ntakerAssetData = takerAssetContract.encodeABI(fn_name="transferFrom", args=[takerAddress, makerAddress, int(takingAmount)])\ngetMakerAmount = contract.encodeABI(fn_name="getMakerAmount", args=[int(makingAmount), int(takingAmount), 0])\ngetMakerAmount = getMakerAmount[:-64] # [:-64] removes the last parameter to match the javascript library\'s output for getMakerAmount\ngetTakerAmount = contract.encodeABI(fn_name="getTakerAmount", args=[int(makingAmount), int(takingAmount), 0])\ngetTakerAmount = getTakerAmount[:-64] # [:-64] removes the last parameter to match the javascript library\'s output for getTakerAmount\n\n# lets build the predicate\n# contract encode abi with the timestamp below function and the current time + 180 seconds\npredicate = contract.encodeABI(fn_name="timestampBelow", args=[w3.eth.getBlock(\'latest\').timestamp + 180])\n\n# lets build the order data\norder_data = {\n    "makerAsset": makerAsset,\n    "takerAsset": takerAsset,\n    "maker": makerAddress,\n    "allowedSender": "0x0000000000000000000000000000000000000000",\n    "receiver": "0x0000000000000000000000000000000000000000",\n    "makingAmount": makingAmount,\n    "takingAmount": takingAmount,\n    "makerAssetData": "0x",\n    "takerAssetData": "0x",\n    "getMakerAmount": getMakerAmount,\n    "getTakerAmount": getTakerAmount,\n    "predicate": predicate,\n    "permit": "0x",\n    "interaction": "0x",\n    "salt": "1", # random number to make the order unique, please do not leave it as 1\n}\n')),(0,i.kt)("p",null,"a limit order can't be signed properly if all the types are strings here we define what each field is and the type it should be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\norder_types = [\n    {"name": "salt", "type": "uint256"},\n    {"name": "makerAsset", "type": "address"},\n    {"name": "takerAsset", "type": "address"},\n    {"name": "maker", "type": "address"},\n    {"name": "receiver", "type": "address"},\n    {"name": "allowedSender", "type": "address"},\n    {"name": "makingAmount", "type": "uint256"},\n    {"name": "takingAmount", "type": "uint256"},\n    {"name": "makerAssetData", "type": "bytes"},\n    {"name": "takerAssetData", "type": "bytes"},\n    {"name": "getMakerAmount", "type": "bytes"},\n    {"name": "getTakerAmount", "type": "bytes"},\n    {"name": "predicate", "type": "bytes"},\n    {"name": "permit", "type": "bytes"},\n    {"name": "interaction", "type": "bytes"},\n]\n\n# this function will fix the order_data to be a typed object instead of only strings\ndef fix_data_types(data, types):\n    """\n    Order data values are all strings as this is what the API expects. This function fixes their types for\n    encoding purposes.\n    """\n    fixed_data = {}\n    for dictionary in types:\n        if "bytes" in dictionary["type"]:\n            fixed_data[dictionary["name"]] = (Web3.toBytes(hexstr=data[dictionary["name"]]))\n        elif "int" in dictionary["type"]:\n            fixed_data[dictionary["name"]] = int(data[dictionary["name"]])\n        else:\n            fixed_data[dictionary["name"]] = data[dictionary["name"]]\n    return fixed_data\n\n# this is a typed data that the private key will be signing, it conforms to the EIP 712 standard\neip712_data = {\n    "primaryType": "Order",\n    "types": {\n        "EIP712Domain": [\n            {"name": "name", "type": "string"},\n            {"name": "version", "type": "string"},\n            {"name": "chainId", "type": "uint256"},\n            {"name": "verifyingContract", "type": "address"},\n        ],\n        "Order": order_types\n    },\n    "domain": {\n        "name": "1inch Limit Order Protocol",\n        "version": "2",\n        "chainId": 1,\n        "verifyingContract": "0x119c71D3BbAC22029622cbaEc24854d3D32D2828",\n    },\n    "message": fix_data_types(order_data, order_types),\n}\n')),(0,i.kt)("p",null,"Finally the private key will be used to sign the encoded data and broadcast to the API"),(0,i.kt)("p",null,"If you are having problems signing please run the following commands:\n",(0,i.kt)("inlineCode",{parentName:"p"},"pip install web3 --upgrade; pip install eth-account==0.6.1")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'encoded_message = encode_structured_data(eip712_data)\nsigned_message = w3.eth.account.sign_message(encoded_message, wallet_key)\n# this is the limit order that will be broadcast to the limit order API\nlimit_order = {\n    "orderHash": signed_message.messageHash.hex(),\n    "signature": signed_message.signature.hex(),\n    "data": order_data,\n}\n\nlimit_order_url = "https://limit-orders.1inch.io/v2.0/1/limit-order" # make sure to change the endpoint if you are not using ETH mainnet\nresponse = requests.post(url=limit_order_url,headers={"accept": "application/json, text/plain, */*", "content-type": "application/json"}, json=limit_order)\n# print the full response\nprint(response.text)\n')))}p.isMDXComponent=!0}}]);